let browser; function getBrowser() { browser = -1 != (navigator.userAgent.indexOf("Opera") || navigator.userAgent.indexOf("OPR")) ? "Opera" : -1 != navigator.userAgent.indexOf("Edg") ? "Edge" : -1 != navigator.userAgent.indexOf("Chrome") ? "Chrome" : -1 != navigator.userAgent.indexOf("Safari") ? "Safari" : -1 != navigator.userAgent.indexOf("Firefox") ? "Firefox" : -1 != navigator.userAgent.indexOf("MSIE") || 1 == !!document.documentMode ? "IE" : "unknown" } getBrowser(); let projectComponentContainers = document.getElementsByClassName("project-component-container"), coordinatesDivs = document.getElementsByClassName("coordinates"), coordinates = (console.log(coordinatesDivs[0].innerHTML), []); for (let e = 0; e < coordinatesDivs.length; e++)coordinates.push(coordinatesDivs[e].innerHTML); console.log(coordinates); let projectThumbnailsSrc = [], projectThumbnails = document.getElementsByClassName("project-thumbnail"); for (let e = 0; e < projectThumbnails.length; e++)console.log(projectThumbnails[e].src), projectThumbnailsSrc.push(projectThumbnails[e].src); let projectTitlesNames = [], projectTitles = document.getElementsByClassName("project-title"); for (let e = 0; e < projectTitles.length; e++)projectTitlesNames.push(projectTitles[e].innerHTML); console.log(projectTitlesNames); let projectTitlesNamesGer = [], projectTitlesGer = document.getElementsByClassName("project-title-ger"); for (let e = 0; e < projectTitlesGer.length; e++)projectTitlesNamesGer.push(projectTitlesGer[e].innerHTML); console.log(projectTitlesNamesGer); let projectAdresses = [], projectAdressesDiv = document.getElementsByClassName("project-adress"); for (let e = 0; e < projectAdressesDiv.length; e++)projectAdresses.push(projectAdressesDiv[e].innerHTML); console.log(projectAdresses); let projectAdressesGer = [], projectAdressesDivGer = document.getElementsByClassName("project-adress-ger"); for (let e = 0; e < projectAdressesDivGer.length; e++)projectAdressesGer.push(projectAdressesDivGer[e].innerHTML); console.log(projectAdressesGer); let projectDescriptions = [], projectDescriptionsDiv = document.getElementsByClassName("project-description"); for (let e = 0; e < projectDescriptionsDiv.length; e++)projectDescriptions.push(projectDescriptionsDiv[e].innerHTML); console.log(projectDescriptions); let projectDescriptionsGer = [], projectDescriptionsDivGer = document.getElementsByClassName("project-description-ger"); for (let e = 0; e < projectDescriptionsDivGer.length; e++)projectDescriptionsGer.push(projectDescriptionsDivGer[e].innerHTML); console.log(projectDescriptionsGer); let projectImagesSrc = [], projectImagesOne = document.getElementsByClassName("project-image-one"), projectImagesTwo = document.getElementsByClassName("project-image-two"), projectImagesThree = document.getElementsByClassName("project-image-three"); for (let e = 0; e < projectComponentContainers.length; e++)projectImagesSrc[e] = [projectImagesOne[e].src, projectImagesTwo[e].src, projectImagesThree[e].src]; console.log(projectImagesSrc); let showOnMap = [], showOnMapDivs = document.getElementsByClassName("show-on-map-div"); console.log(showOnMapDivs.length); for (let e = 0; e < showOnMapDivs.length; e++)showOnMap.push(showOnMapDivs[e].innerHTML); console.log(showOnMap); let mainContainerMapTL = gsap.fromTo(mainContainerMap, { top: "-99vh" }, { top: 0, duration: 1, delay: 0 }), mainContainerProjectsTL = (mainContainerMapTL.pause(), gsap.fromTo(mainContainerProjects, { top: "-100vh" }, { top: 0, duration: 1, delay: 0 })), switcher = (mainContainerProjectsTL.pause(), document.createElement("div")), switcherTL = (switcher.classList.add("switcher"), projectsWrap.appendChild(switcher), switcher.innerHTML = "GO TO MAP", gsap.fromTo(switcher, { opacity: 1 }, { opacity: 0, duration: .5, delay: 0 })), mapOpen = (switcherTL.pause(), !1), mouseFollow = (switcher.onclick = () => { mapOpen ? (mapOpen = !1, mainContainerMapTL.reverse(), mainContainerProjectsTL.reverse(), switcherTL.play(), setTimeout(() => { switcher.innerHTML = "GO TO MAP", switcher.style.bottom = "auto", switcher.style.top = "0", switcherTL.reverse() }, 500)) : (mapOpen = !0, mainContainerMapTL.play(), mainContainerProjectsTL.play(), switcherTL.play(), setTimeout(() => { switcher.innerHTML = "GO TO PROJECTS", switcher.style.top = "auto", switcher.style.bottom = "0", switcherTL.reverse(), closeProjectsPage() }, 500)) }, document.createElement("div")), mouseFollowTL = (mouseFollow.classList.add("mouseFollow"), mainContainerProjects.appendChild(mouseFollow), gsap.fromTo(mouseFollow, { opacity: 1 }, { opacity: 0, duration: .5, delay: 0 })), mouseFollowText = (mouseFollowTL.pause(), document.createElement("div")); mouseFollowText.classList.add("mouseFollowText"), mouseFollow.appendChild(mouseFollowText), mouseFollowText.innerHTML = "CLICK TO EXPLORE", document.addEventListener("mousemove", getMouse), mouseFollow.style.position = "absolute"; var mouseFollowPos = { x: 0, y: 0 }, mouse = { x: 0, y: 0 }; function getMouse(e) { mouse.x = e.pageX + 50, mouse.y = e.pageY + 20 } function followMouse() { var e = mouse.x - mouseFollowPos.x, t = mouse.y - mouseFollowPos.y; mouseFollowPos.x += e / 5, mouseFollowPos.y += t / 2, mouseFollow.style.left = mouseFollowPos.x + "px", mouseFollow.style.top = mouseFollowPos.y + "px" } let projectsClickableWraper = document.createElement("div"), closeProjects = (projectsClickableWraper.classList.add("projectsClickableWraper"), mainContainerProjects.appendChild(projectsClickableWraper), document.createElement("div")), closeIcon = (closeProjects.classList.add("closeProjects"), mainContainerProjects.appendChild(closeProjects), document.createElement("div")), projWraper = (closeIcon.classList.add("closeIcon"), closeProjects.appendChild(closeIcon), document.createElement("div")), projCont = (projWraper.classList.add("projects_wrapper"), mainContainerProjects.appendChild(projWraper), document.createElement("div")), projBack = (projCont.classList.add("projects_container"), projWraper.appendChild(projCont), document.createElement("div")), projectsBckgImages = (projBack.classList.add("project_background"), projBack.draggable = !0, projCont.appendChild(projBack), document.createElement("div")), projectsBckgImagesTL = (projectsBckgImages.classList.add("projects-bckg-images"), projBack.appendChild(projectsBckgImages), gsap.fromTo(projectsBckgImages, { opacity: 0 }, { opacity: 1, duration: 2, delay: 1 })), projectsTransparentImgArray = (projectsBckgImagesTL.pause(), ["https://raw.githubusercontent.com/quincecreative/logrodProjectPage/gh-pages/transparentBackgroundImage0.png"]), projectsTransparentImgPosLeft = [400, -550, -500, 500, 600, -1300, 1400, -1100, 1400, -1400, 50, -100], projectsTransparentImgPosTop = [100, -400, 700, -800, 800, 400, -1200, -1e3, -400, 1100, -1400, 1400], projectsTiles = document.createElement("div"), projTitlForAppend = (projectsTiles.classList.add("projects-titles"), projBack.appendChild(projectsTiles), ["Upcoming Projects Showcase", "Futuristic Marvel", "Latest Sneak Peek Upcoming Projects Showcase", "Architectural Gem"]); for (let t = 0; t < 4; t++) { let e = document.createElement("div"); e.classList.add("projects-title"), projectsTiles.appendChild(e), e.innerHTML = projTitlForAppend[t] } let projInnerWraper = document.createElement("div"); projInnerWraper.classList.add("projects_inner-wrapper"), projBack.appendChild(projInnerWraper); let projBackWidth, projBackHeight, numOfTransperentBckgImgs, projectsLength = projectThumbnailsSrc.length, projBackXCenter = (projectsLength < 6 && (projBackWidth = 6e3, projBackHeight = 4e3, numOfTransperentBckgImgs = 2), 5 < projectsLength && projectsLength < 11 && (projBackWidth = 7e3, projBackHeight = 4500, numOfTransperentBckgImgs = 4), projectsLength < 21 && 10 < projectsLength && (projBackWidth = 8e3, projBackHeight = 5500, numOfTransperentBckgImgs = 7), projectsLength < 31 && 20 < projectsLength && (projBackWidth = 1e4, projBackHeight = 7e3, numOfTransperentBckgImgs = 10), 30 < projectsLength && (projBackWidth = 12e3, projBackHeight = 9e3, numOfTransperentBckgImgs = 12), projBackWidth / 2), projBackYCenter = projBackHeight / 2; projWraper.style.width = projBack.style.width = projectsBckgImages.style.width = projBackWidth + "px", projWraper.style.height = projBack.style.height = projectsBckgImages.style.height = projBackHeight + "px"; for (let t = 0; t < numOfTransperentBckgImgs; t++) { let e = document.createElement("div"); e.classList.add("transparent-bckg-img"), projectsBckgImages.appendChild(e), e.style.background = `url(${projectsTransparentImgArray[0]})`, e.style.backgroundSize = "cover", e.style.left = projBackXCenter + projectsTransparentImgPosLeft[t] - e.offsetWidth / 2 + "px", e.style.top = projBackYCenter + projectsTransparentImgPosTop[t] - e.offsetHeight / 2 + "px", 1 == t && (e.style.scale = "1.2"), t % 2 == 0 && (e.style.scale = "1.3"), t % 3 == 0 && (e.style.scale = "1.1") } projectsTiles.style.left = projBackXCenter - projectsTiles.offsetWidth / 2 + "px", projectsTiles.style.top = projBackYCenter - projectsTiles.offsetHeight / 2 - 200 + "px"; let projectsTilesTL = gsap.fromTo(projectsTiles, { opacity: 0 }, { opacity: 1, duration: 5, delay: 1 }), strLineBottom = (projectsTilesTL.pause(), document.createElement("div")), strLineBottomTilesTL = (strLineBottom.classList.add("strLineBottom"), projWraper.appendChild(strLineBottom), gsap.fromTo(strLineBottom, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), strLineTop = (strLineBottomTilesTL.pause(), document.createElement("div")), strLineTopTL = (strLineTop.classList.add("strLineTop"), projWraper.appendChild(strLineTop), gsap.fromTo(strLineTop, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), yCoordNum = (strLineTopTL.pause(), document.createElement("div")), yCoordNumTL = (yCoordNum.classList.add("yCoordNum"), projWraper.appendChild(yCoordNum), yCoordNum.innerHTML = "X - 100", gsap.fromTo(yCoordNum, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), hrLineRight = (yCoordNumTL.pause(), document.createElement("div")), hrLineRightTL = (hrLineRight.classList.add("hrLineRight"), projWraper.appendChild(hrLineRight), gsap.fromTo(hrLineRight, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), hrLineLeft = (hrLineRightTL.pause(), document.createElement("div")), hrLineLeftTL = (hrLineLeft.classList.add("hrLineLeft"), projWraper.appendChild(hrLineLeft), gsap.fromTo(hrLineLeft, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), xCoordNum = (hrLineLeftTL.pause(), document.createElement("div")), xCoordNumTL = (xCoordNum.classList.add("xCoordNum"), projWraper.appendChild(xCoordNum), xCoordNum.innerHTML = "Y - 100", gsap.fromTo(xCoordNum, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), projectCursor = (xCoordNumTL.pause(), document.createElement("div")), projectCursorTL = (projWraper.appendChild(projectCursor), projectCursor.classList.add("cursor"), gsap.fromTo(projectCursor, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), projectCursorBckg = (projectCursorTL.pause(), document.createElement("div")), projectCursorBckgTL = (projWraper.appendChild(projectCursorBckg), projectCursorBckg.classList.add("cursor-background"), gsap.fromTo(projectCursorBckg, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), cursorPosSet = (projectCursorBckgTL.pause(), 10), botRigLinePos = 11, topLefLinePos = 9; function cursorHandle(e, t) { projectCursor.style.left = projectCursorBckg.style.left = e - cursorPosSet + "px", projectCursor.style.top = projectCursorBckg.style.top = t - cursorPosSet + "px", strLineBottom.style.left = e + "px", strLineBottom.style.top = t + botRigLinePos + "px", strLineTop.style.left = e + "px", strLineTop.style.top = t - projBackHeight - topLefLinePos + "px", yCoordNum.style.left = e - 13 + "px", yCoordNum.style.top = t - 300 + "px", yCoordNum.innerHTML = "X - " + Math.round(e), hrLineRight.style.top = t + "px", hrLineRight.style.left = e + botRigLinePos + "px", hrLineLeft.style.top = t + "px", hrLineLeft.style.left = e - projBackWidth - topLefLinePos + "px", xCoordNum.style.left = e - 300 + "px", xCoordNum.style.top = t - 20 + "px", xCoordNum.innerHTML = "Y - " + Math.round(t) } mainContainerProjects.addEventListener("mousemove", e => { cursorHandle(e.x, e.y) }); let isDraging = !1, bigDraggable = Draggable.create(projBack, { bounds: window, inertia: !0, edgeResistance: .5, onDragStart: function () { isDraging = !0 }, onDrag: function (e) { var t = e.pageX, e = e.pageY; mouse.x = t + 50, mouse.y = e + 20, cursorHandle(t, e) }, onDragEnd: function () { isDraging = !1 } })[0], projPositionsLeft = (gsap.set(projBack, { x: (bigDraggable.minX + bigDraggable.maxX) / 2, y: (bigDraggable.minY + bigDraggable.maxY) / 2 }), bigDraggable.update(), [200, -550, 700, -50, 50, -600, 800, -1100, 1200, 1100, -1100, -1300, 1350, 50, 50, -650, 750, 750, -750, -1300, 1500, 1400, -1400, -1700, 1700, 1700, -1700, 50, 50, -650, 800, -2e3, 2e3, -50, -50, -800, -800, 700, 800, 1400, 1450, -1400, -1450, -2100, -2100, 2100, 2100, 2400, 2400, -2400, -2400]), projPositionsTop = [300, 0, -300, -450, 700, 500, 400, -600, 900, -600, 900, 50, 50, -1100, 1100, -1050, 1400, -1050, 1400, -1300, 1350, -1300, 1400, -800, 500, -800, 500, -1600, 1600, -1600, -1600, -200, -200, -2e3, 2e3, -2e3, 1900, -2e3, 1900, -1800, 1800, -1800, 1800, -1300, 1e3, -1300, 1e3, -700, 300, -700, 300], projImgWidth = 400, gsapLettersTimeLines = []; for (let r = 0; r < projectsLength; r++) { let e = document.createElement("div"), t = (projInnerWraper.appendChild(e), e.classList.add("project-container"), new Image), o = (e.appendChild(t), t.classList.add("project-img"), t.src = projectThumbnailsSrc[r], document.createElement("div")); e.appendChild(o), o.classList.add("project-title"), o.innerHTML = projectTitlesNames[r]; const D = new SplitType(o, { types: "chars" }); gsapLettersTimeLines.push(gsap.fromTo(D.chars, { y: 100, opacity: 0 }, { y: 0, opacity: 1, stagger: .05, duration: .3 })), gsapLettersTimeLines[r].pause(), r % 2 == 0 ? (e.style.transition = "0.55s", e.style.width = projImgWidth - 50 + "px") : r % 3 == 0 ? (e.style.transition = "0.6s", e.style.width = projImgWidth + 50 + "px") : (e.style.transition = "0.5s", e.style.width = projImgWidth + "px"), r == projectsLength - 1 && (e.style.width = projImgWidth - 50 + "px"), t.onload = function () { e.style.left = projBackXCenter - e.offsetWidth / 2 + "px", e.style.top = projBackYCenter - e.offsetHeight / 2 + "px" } } let projectContainers = document.getElementsByClassName("project-container"), projectTitlesLetters = document.getElementsByClassName("project-title"); function projectOnMouseOver(t) { gsapLettersTimeLines[t].play(), projectContainers[t].style.transform = "scale(1.2)"; for (let e = 0; e < projectContainers.length; e++)e != t && (projectContainers[e].style.transform = "scale(0.8)"); projectCursor.style.scale = "2", projectCursorBckg.style.scale = "2", cursorPosSet = 10, botRigLinePos = 22, topLefLinePos = 19, mouseFollowTL.play(), setTimeout(() => { mouseFollowText.innerHTML = "SEE DETAILS", mouseFollowTL.reverse() }, 500) } function projectOnMouseOut(e) { gsapLettersTimeLines[e].reverse(); for (let e = 0; e < projectContainers.length; e++)projectContainers[e].style.transform = "scale(1)"; projectCursor.style.scale = "1", projectCursorBckg.style.scale = "1", cursorPosSet = 10, botRigLinePos = 11, topLefLinePos = 9, mouseFollowTL.play(), setTimeout(() => { mouseFollowText.innerHTML = "DRAG TO MOVE", mouseFollowTL.reverse() }, 500) } let projectsOpen = !1; for (let e = 0; e < projectContainers.length; e++)projectContainers[e].addEventListener("mouseover", function () { projectsOpen && projectOnMouseOver(e) }), projectContainers[e].addEventListener("mouseout", function () { projectsOpen && projectOnMouseOut(e) }), projectContainers[e].addEventListener("click", function () { projectsOpen && console.log(e) }); let projectPageOpen = !1; function closeProjectsPage() { projectPageOpen && (projectPageOpen = !1, closeProjects.style.display = "none", projectCursor.style.display = "none", projectCursorBckg.style.display = "none", strLineBottom.style.display = "none", strLineTop.style.display = "none", yCoordNum.style.display = "none", hrLineRight.style.display = "none", hrLineLeft.style.display = "none", xCoordNum.style.display = "none", projectsClickableWraper.style.display = "block", projectsOpen = !1, strLineBottomTilesTL.reverse(), strLineTopTL.reverse(), yCoordNumTL.reverse(), hrLineRightTL.reverse(), hrLineLeftTL.reverse(), xCoordNumTL.reverse(), projectCursorTL.reverse(), projectCursorBckgTL.reverse(), closeProjectsTL.reverse(), projectsTilesTL.timeScale(-3), projectsBckgImagesTL.timeScale(-3), projBack.style.transition = "0.5s", gsap.set(projBack, { x: (bigDraggable.minX + bigDraggable.maxX) / 2, y: (bigDraggable.minY + bigDraggable.maxY) / 2 }), bigDraggable.update(), setTimeout(() => { projBack.style.transition = "0s"; for (let e = 0; e < projectContainers.length; e++)projectContainers[e].style.left = projBackXCenter - projectContainers[e].offsetWidth / 2 + "px", projectContainers[e].style.top = projBackYCenter - projectContainers[e].offsetHeight / 2 + "px" }, 500), mouseFollowTL.play(), setTimeout(() => { mouseFollowText.innerHTML = "CLICK TO EXPLORE", mouseFollowTL.reverse() }, 1e3)) } projectsClickableWraper.addEventListener("click", e => { if (!projectPageOpen) { projectPageOpen = !0, mouseFollowTL.play(), setTimeout(() => { mouseFollowText.innerHTML = "DRAG TO MOVE", mouseFollowTL.reverse() }, 1e3), projectsClickableWraper.style.display = "none", setTimeout(() => { closeProjects.style.display = "block", projectCursor.style.display = "block", projectCursorBckg.style.display = "block", strLineBottom.style.display = "block", strLineTop.style.display = "block", yCoordNum.style.display = "block", hrLineRight.style.display = "block", hrLineLeft.style.display = "block", xCoordNum.style.display = "block", projectsOpen = !0, strLineBottomTilesTL.play(), strLineTopTL.play(), yCoordNumTL.play(), hrLineRightTL.play(), hrLineLeftTL.play(), xCoordNumTL.play(), projectCursorTL.play(), projectCursorBckgTL.play(), closeProjectsTL.play() }, 500), projectsTilesTL.timeScale(1), projectsTilesTL.play(), projectsBckgImagesTL.timeScale(1), projectsBckgImagesTL.play(); for (let e = 0; e < projectContainers.length; e++)projectContainers[e].style.left = projBackXCenter + projPositionsLeft[e] - projectContainers[e].offsetWidth / 2 + "px", projectContainers[e].style.top = projBackYCenter + projPositionsTop[e] - projectContainers[e].offsetHeight / 2 + "px" } }); let closeProjectsTL = gsap.fromTo(closeProjects, { opacity: 0 }, { opacity: 1, duration: 1, delay: 0 }), closeIconTL = (closeProjectsTL.pause(), closeProjects.addEventListener("click", e => { closeProjectsPage() }), gsap.fromTo(closeIcon, { rotation: 0 }, { rotation: 90, duration: .5, delay: 0 })); function getFPS() { setInterval(function () { fps.innerHTML = engine.getFps().toFixed(2) + " fps" }, 1e3) } closeIconTL.pause(), closeProjects.addEventListener("mouseover", e => { closeIconTL.play(), mouseFollowTL.play() }), closeProjects.addEventListener("mouseout", e => { closeIconTL.reverse(), mouseFollowTL.reverse() }); let fps = document.createElement("div"), loadingPage = (projectsWrap.appendChild(fps), fps.classList.add("fps"), fps.innerHTML = "fps", document.createElement("div")), loadingSpinner = (projectsWrap.appendChild(loadingPage), loadingPage.classList.add("loadingPage"), document.createElement("div")), loadingPercentages = (document.getElementsByClassName("loadingPage")[0].appendChild(loadingSpinner), loadingSpinner.classList.add("loadingSpinner"), document.createElement("div")), canvasZone = (document.getElementsByClassName("loadingPage")[0].appendChild(loadingPercentages), loadingPercentages.classList.add("loadingPercentages"), document.createElement("div")), canvas = (mainContainerMap.appendChild(canvasZone), canvasZone.classList.add("canvasZone"), document.createElement("canvas")), devPopUp = (canvasZone.appendChild(canvas), canvas.classList.add("renderCanvas"), document.createElement("div")), toMapCenter = (mainContainerMap.appendChild(devPopUp), devPopUp.classList.add("devPopUp", "displayNone"), devPopUp.innerHTML = "Click to select location", document.createElement("div")); mainContainerMap.appendChild(toMapCenter), toMapCenter.classList.add("toMapCenter", "displayNone"); var startRenderLoop = function (e, t) { e.runRenderLoop(function () { sceneToRender && sceneToRender.activeCamera && sceneToRender.render() }) }, engine = (BABYLON.DefaultLoadingScreen.prototype.displayLoadingUI = function () { document.getElementById("customLoadingScreenDiv") && (document.getElementById("customLoadingScreenDiv").style.display = "initial") }, BABYLON.DefaultLoadingScreen.prototype.hideLoadingUI = function () { loadingPage.remove() }, null), scene = null, sceneToRender = null, createDefaultEngine = function () { return new BABYLON.Engine(canvas, !0, { preserveDrawingBuffer: !0, stencil: !0, disableWebGL2Support: !1 }) }, createScene = async function () { engine.displayLoadingUI(), engine.disableTextureBindingOptimization = !0; var a = new BABYLON.Scene(engine); function e(e, t, o, r) { var n = new BABYLON.Animation("myAnimationcamera", "position", 60, BABYLON.Animation.ANIMATIONTYPE_VECTOR3, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT), s = [], e = (s.push({ frame: 0, value: c.position.clone() }), s.push({ frame: 120, value: new BABYLON.Vector3(e, t, o) }), n.setKeys(s), new BABYLON.CubicEase), t = (e.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT), n.setEasingFunction(e), c.animations.push(n), a.beginAnimation(c, 0, 120, !1), new BABYLON.Animation("radiusAnimation", "radius", 60, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT)), o = [], s = (o.push({ frame: 0, value: i.radius }), o.push({ frame: 120, value: r }), t.setKeys(o), new BABYLON.CubicEase), e = (s.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT), t.setEasingFunction(s), i.animations.push(t), a.beginAnimation(i, 0, 120, !1), new BABYLON.Animation("alphaAnimation", "alpha", 60, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT)), n = [], r = (n.push({ frame: 0, value: i.alpha }), n.push({ frame: 120, value: 1.32 }), e.setKeys(n), new BABYLON.CubicEase); r.setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT), e.setEasingFunction(r), i.animations.push(e), a.beginAnimation(i, 0, 120, !1) } a.useRightHandedSystem = !1, a.clearColor = BABYLON.Color3.FromHexString("#1b1b1b"), document.addEventListener("keydown", e => { "f" === e.key && (getFPS(), fps.style.display = "block") }); let i = new BABYLON.ArcRotateCamera("camera1", Math.PI / 2, Math.PI / 2, 0, new BABYLON.Vector3(0, 0, 0), a); i.attachControl(canvas, !0), i.inputs.attached.keyboard.detachControl(), i.setPosition(new BABYLON.Vector3(-3.99, 40, 15.18)), i.minZ = .1, i.lowerRadiusLimit = 5, i.upperRadiusLimit = 50, i.wheelDeltaPercentage = .01, i.upperBetaLimit = .5; var c = new BABYLON.MeshBuilder.CreateBox("cameraTarget", { width: 1, height: 1, depth: 1 }, a), t = (c.position = new BABYLON.Vector3(-3.99, -.03, 15.18), (i.target = c).isVisible = !1, i.alpha = 1.32, new BABYLON.FreeCamera("devCamera", new BABYLON.Vector3(-78, 5, 0), a)); t.rotation.y = 1.57, new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), a).intensity = .7; let o = 0; var r = await Promise.all([BABYLON.SceneLoader.ImportMeshAsync("", "https://raw.githubusercontent.com/quincecreative/logrodProjectPage/gh-pages/Minhen5.glb", null, a, e => { o = (o = e.lengthComputable ? 100 * e.loaded / e.total : 100 * e.loaded / 24955036).toFixed(), loadingPercentages.innerHTML = o + "%" })]), r = (r[0], r[0].meshes[0]), r = (r.position = new BABYLON.Vector3(0, 0, 0), r.addRotation(0, 0, 0), r.clone()); r.position = new BABYLON.Vector3(0, 0, 75.88), r.scaling = new BABYLON.Vector3(1, 1, 1); let n = [], s = [], p = [], l = [], d = []; var g, m, u, h, L, j, T, y, C = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI", !0, a); let B = 1; function D(e) { return Number(e) } "Chrome" != browser && "Opera" != browser && "Edge" != browser && 1500 < canvas.width && (C.idealWidth = 1500, C.renderAtIdealSize = !0, B = .75); let f = [], O = [], v = []; for (let e = 0; e < coordinates.length; e++) { var w = coordinates[e].split(",").map(D); f[e] = [w[0], w[1], w[2]], g = w[0], m = w[1], w = w[2], u = e, "yes" === showOnMap[u] || "Yes" === showOnMap[u] ? ((u = new BABYLON.MeshBuilder.CreateBox("posMesh", { width: .1, height: .1, depth: .1 }, a)).position = new BABYLON.Vector3(g, m, w), u.isVisible = !1, d.push(u), (g = new BABYLON.GUI.Ellipse).width = "0px", g.height = "0px", g.color = "white", g.background = "white", C.addControl(g), g.linkWithMesh(u), s.push(g), (m = new BABYLON.GUI.Ellipse).width = 50 * B + "px", m.height = 50 * B + "px", m.color = "white", m.thickness = 15 * B, m.background = "transparent", C.addControl(m), m.linkWithMesh(u), n.push(m)) : (d.push(""), s.push(""), n.push("")) } for (let e = 0; e < coordinates.length; e++)h = d[e], L = projectThumbnailsSrc[e], j = projectTitlesNames[e], T = projectAdresses[e], y = e, "yes" === showOnMap[y] || "Yes" === showOnMap[y] ? ((y = new BABYLON.GUI.Rectangle).width = "0px", y.height = "0px", y.color = "Orange", y.thickness = 0, y.background = "white", C.addControl(y), y.linkWithMesh(h), y.linkOffsetX = -175 * B + "px", y.linkOffsetY = -75 * B + "px", p.push(y), (h = new BABYLON.GUI.Rectangle).width = 150 * B + "px", h.height = 150 * B + "px", h.color = "Orange", h.thickness = 0, h.background = "white", h.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT, y.addControl(h), (L = new BABYLON.GUI.Image("image", L)).width = 150 * B + "px", L.height = 150 * B + "px", L.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT, h.addControl(L), (h = new BABYLON.GUI.Rectangle).width = 190 * B + "px", h.height = 50 * B + "px", h.color = "Orange", h.thickness = 0, h.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT, h.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP, h.top = 15 * B + "px", h.paddingRight = 10 * B + "px", y.addControl(h), (L = new BABYLON.GUI.TextBlock).color = "Black", L.fontSize = 17 * B + "px", L.textHorizontalAlignment = "left", L.text = j, L.textWrapping = !0, L.drawOutline = !0, L.outlineColor = "black", L.outlineWidth = .5 * B, h.addControl(L), (j = new BABYLON.GUI.Rectangle).width = 190 * B + "px", j.height = 30 * B + "px", j.color = "Orange", j.thickness = 0, j.top = 60 * B + "px", j.paddingRight = 10 * B + "px", j.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT, j.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP, y.addControl(j), (h = new BABYLON.GUI.TextBlock).color = "Gray", h.fontSize = 12 * B + "px", h.textHorizontalAlignment = "left", h.text = T, h.textWrapping = !0, j.addControl(h), (L = new BABYLON.GUI.Rectangle).width = 190 * B + "px", L.height = 50 * B + "px", L.color = "Orange", L.thickness = 0, L.top = 90 * B + "px", L.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT, L.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP, y.addControl(L), (T = BABYLON.GUI.Button.CreateSimpleButton("seeDetails", "See datails")).width = 120 * B + "px", T.fontSize = 15 * B + "px", T.height = 40 * B + "px", T.color = "white", T.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT, T.background = "black", L.addControl(T), l.push(T)) : (p.push(""), l.push("")), O.push(!1), v.push(!1); let N = 50 * B, A = 15 * B, k = 0, F = 0, x = 0, E = 0, I = !1; function P(e) { I = !1, O[e] = !1, v[e] = !1, a.onAfterRenderObservable.clear(), n[e].thickness = 15 * B, n[e].width = 50 * B + "px", n[e].height = 50 * B + "px", s[e].width = "0px", s[e].height = "0px", p[e].width = "0px", p[e].height = "0px", N = 50 * B, A = 15 * B, k = 0, F = 0, x = 0, E = 0 } for (let t = 0; t < n.length; t++)"yes" !== showOnMap[t] && "Yes" !== showOnMap[t] || (n[t].onPointerEnterObservable.add(function () { var e; Y || (e = t, I ? (n[e].thickness = 5 * B, n[e].width = 70 * B + "px", n[e].height = 70 * B + "px", s[e].width = 30 * B + "px", s[e].height = 30 * B + "px", p[e].width = 350 * B + "px", p[e].height = 150 * B + "px") : (I = !0, a.registerAfterRender(function () { N < 71 * B && (n[e].thickness = A, n[e].width = N + "px", n[e].height = N + "px", N += 4 * B, A -= 2 * B, s[e].width = k + "px", s[e].height = k + "px", k += 6 * B), (x < 351 * B || E < 151 * B) && (p[e].width = x + "px", p[e].height = E + "px", x += 70 * B, E += 30 * B) })), canvasZone.style.cursor = "pointer", O[t] = !0) }), n[t].onPointerOutObservable.add(function () { Y || (canvasZone.style.cursor = "", O[t] = !1, setTimeout(() => { O[t] || v[t] || P(t) }, 0)) }), n[t].onPointerDownObservable.add(function () { Y || (toMapCenter.classList.remove("displayNone"), toMapCenter.style.opacity = "1", e(f[t][0], f[t][1], f[t][2], 15)) })); toMapCenter.onclick = () => { toMapCenter.classList.add("displayNone"), toMapCenter.style.opacity = "0", e(-3.99, -.03, 15.18, 40) }; for (let e = 0; e < p.length; e++)"yes" !== showOnMap[e] && "Yes" !== showOnMap[e] || (p[e].onPointerEnterObservable.add(function () { Y || (v[e] = !0) }), p[e].onPointerOutObservable.add(function () { Y || (v[e] = !1, setTimeout(() => { O[e] || v[e] || P(e) }, 0)) }), l[e].onPointerEnterObservable.add(function () { Y || (canvasZone.style.cursor = "pointer") }), l[e].onPointerOutObservable.add(function () { Y || (canvasZone.style.cursor = "") }), l[e].onPointerUpObservable.add(function () { Y || (P(e), console.log(e)) })); let b = [], R, G; let M = 0, Y = !1; return document.addEventListener("keydown", e => { if ("v" === e.key) { if (e.repeat) return; G = a.onPointerObservable.add(e => { e.pickInfo.pickedPoint && 0 === e.event.button && (b[0] = e.pickInfo.pickedPoint.x.toFixed(2), b[1] = e.pickInfo.pickedPoint.y.toFixed(2), b[2] = e.pickInfo.pickedPoint.z.toFixed(2), R = b.join(","), navigator.clipboard.writeText(R), devPopUp.innerHTML = "Location Copied!", setTimeout(() => { devPopUp.innerHTML = "Click to select location" }, 2e3)) }), canvasZone.classList.add("devMode"), devPopUp.classList.remove("displayNone") } "c" === e.key && (0 == M ? (Y = !0, M = 1, a.activeCamera = a.cameras[1], t.attachControl(!0), i.detachControl(!0)) : (Y = !1, M = 0, a.activeCamera = a.cameras[0], t.detachControl(!0), i.attachControl(!0))) }), document.addEventListener("keyup", e => { "v" === e.key && (a.onPointerObservable.remove(G), canvasZone.classList.remove("devMode"), devPopUp.classList.add("displayNone")) }), a.onBeforeRenderObservable.add(function () { followMouse() }), a.executeWhenReady(() => { engine.hideLoadingUI(), engine.runRenderLoop(() => { engine.setHardwareScalingLevel(1 / window.devicePixelRatio), engine.adaptToDeviceRatio = !0, a.render() }) }), a }; window.initFunction = async function () { if (window.engine = await async function () { try { return createDefaultEngine() } catch (e) { return console.log("the available createEngine function failed. Creating the default engine instead"), createDefaultEngine() } }(), !engine) throw "engine should not be null."; startRenderLoop(engine, canvas), window.scene = createScene() }, initFunction().then(() => { sceneToRender = scene }), window.addEventListener("resize", function () { engine.resize() });