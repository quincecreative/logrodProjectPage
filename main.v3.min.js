let projectComponentContainers = document.getElementsByClassName("project-component-container"), coordinatesDivs = document.getElementsByClassName("coordinates"), coordinates = (console.log(coordinatesDivs[0].innerHTML), []); for (let e = 0; e < coordinatesDivs.length; e++)coordinates.push(coordinatesDivs[e].innerHTML); console.log(coordinates); let projectThumbnailsSrc = [], projectThumbnails = document.getElementsByClassName("project-thumbnail"); for (let e = 0; e < projectThumbnails.length; e++)console.log(projectThumbnails[e].src), projectThumbnailsSrc.push(projectThumbnails[e].src); let projectTitlesNames = [], projectTitles = document.getElementsByClassName("project-title"); for (let e = 0; e < projectTitles.length; e++)projectTitlesNames.push(projectTitles[e].innerHTML); console.log(projectTitlesNames); let projectTitlesNamesGer = [], projectTitlesGer = document.getElementsByClassName("project-title-ger"); for (let e = 0; e < projectTitlesGer.length; e++)projectTitlesNamesGer.push(projectTitlesGer[e].innerHTML); console.log(projectTitlesNamesGer); let projectAdresses = [], projectAdressesDiv = document.getElementsByClassName("project-adress"); for (let e = 0; e < projectAdressesDiv.length; e++)projectAdresses.push(projectAdressesDiv[e].innerHTML); console.log(projectAdresses); let projectAdressesGer = [], projectAdressesDivGer = document.getElementsByClassName("project-adress-ger"); for (let e = 0; e < projectAdressesDivGer.length; e++)projectAdressesGer.push(projectAdressesDivGer[e].innerHTML); console.log(projectAdressesGer); let projectDescriptions = [], projectDescriptionsDiv = document.getElementsByClassName("project-description"); for (let e = 0; e < projectDescriptionsDiv.length; e++)projectDescriptions.push(projectDescriptionsDiv[e].innerHTML); console.log(projectDescriptions); let projectDescriptionsGer = [], projectDescriptionsDivGer = document.getElementsByClassName("project-description-ger"); for (let e = 0; e < projectDescriptionsDivGer.length; e++)projectDescriptionsGer.push(projectDescriptionsDivGer[e].innerHTML); console.log(projectDescriptionsGer); let projectImagesSrc = [], projectImagesOne = document.getElementsByClassName("project-image-one"), projectImagesTwo = document.getElementsByClassName("project-image-two"), projectImagesThree = document.getElementsByClassName("project-image-three"); for (let e = 0; e < projectComponentContainers.length; e++)projectImagesSrc[e] = [projectImagesOne[e].src, projectImagesTwo[e].src, projectImagesThree[e].src]; console.log(projectImagesSrc); let mainContainerMapTL = gsap.fromTo(mainContainerMap, { top: "-100vh" }, { top: 0, duration: 1, delay: 0 }), mainContainerProjectsTL = (mainContainerMapTL.pause(), gsap.fromTo(mainContainerProjects, { top: "-100vh" }, { top: 0, duration: 1, delay: 0 })), switcher = (mainContainerProjectsTL.pause(), document.createElement("div")), switcherTL = (switcher.classList.add("switcher"), projectsWrap.appendChild(switcher), switcher.innerHTML = "GO TO MAP", gsap.fromTo(switcher, { opacity: 1 }, { opacity: 0, duration: .5, delay: 0 })), mapOpen = (switcherTL.pause(), !1), mouseFollow = (switcher.onclick = () => { mapOpen ? (mapOpen = !1, mainContainerMapTL.reverse(), mainContainerProjectsTL.reverse(), switcherTL.play(), setTimeout(() => { switcher.innerHTML = "GO TO MAP", switcher.style.bottom = "auto", switcher.style.top = "0", switcherTL.reverse() }, 500)) : (mapOpen = !0, mainContainerMapTL.play(), mainContainerProjectsTL.play(), switcherTL.play(), setTimeout(() => { switcher.innerHTML = "GO TO PROJECTS", switcher.style.top = "auto", switcher.style.bottom = "0", switcherTL.reverse(), closeProjectsPage() }, 500)) }, document.createElement("div")), mouseFollowTL = (mouseFollow.classList.add("mouseFollow"), mainContainerProjects.appendChild(mouseFollow), gsap.fromTo(mouseFollow, { opacity: 1 }, { opacity: 0, duration: .5, delay: 0 })), mouseFollowText = (mouseFollowTL.pause(), document.createElement("div")); mouseFollowText.classList.add("mouseFollowText"), mouseFollow.appendChild(mouseFollowText), mouseFollowText.innerHTML = "CLICK TO EXPLORE", document.addEventListener("mousemove", getMouse), mouseFollow.style.position = "absolute"; var mouseFollowPos = { x: 0, y: 0 }, mouse = { x: 0, y: 0 }; function getMouse(e) { mouse.x = e.pageX + 50, mouse.y = e.pageY + 20 } function followMouse() { var e = mouse.x - mouseFollowPos.x, t = mouse.y - mouseFollowPos.y; mouseFollowPos.x += e / 5, mouseFollowPos.y += t / 2, mouseFollow.style.left = mouseFollowPos.x + "px", mouseFollow.style.top = mouseFollowPos.y + "px" } let projectsClickableWraper = document.createElement("div"), closeProjects = (projectsClickableWraper.classList.add("projectsClickableWraper"), mainContainerProjects.appendChild(projectsClickableWraper), document.createElement("div")), closeIcon = (closeProjects.classList.add("closeProjects"), mainContainerProjects.appendChild(closeProjects), document.createElement("div")), projWraper = (closeIcon.classList.add("closeIcon"), closeProjects.appendChild(closeIcon), document.createElement("div")), projCont = (projWraper.classList.add("projects_wrapper"), mainContainerProjects.appendChild(projWraper), document.createElement("div")), projBack = (projCont.classList.add("projects_container"), projWraper.appendChild(projCont), document.createElement("div")), projectsBckgImages = (projBack.classList.add("project_background"), projCont.appendChild(projBack), document.createElement("div")), projectsBckgImagesTL = (projectsBckgImages.classList.add("projects-bckg-images"), projBack.appendChild(projectsBckgImages), gsap.fromTo(projectsBckgImages, { opacity: 0 }, { opacity: 1, duration: 2, delay: 1 })), projectsTransparentImgArray = (projectsBckgImagesTL.pause(), ["https://raw.githubusercontent.com/quincecreative/logrodProjectPage/gh-pages/transparentBackgroundImage0.png"]), projectsTransparentImgPosLeft = [400, -550, -500, 500, 600, -1300, 1400, -1100, 1400, -1400, 50, -100], projectsTransparentImgPosTop = [100, -400, 700, -800, 800, 400, -1200, -1e3, -400, 1100, -1400, 1400], projectsTiles = document.createElement("div"); projectsTiles.classList.add("projects-titles"), projBack.appendChild(projectsTiles), let = projTitlForAppend = ["Upcoming Projects Showcase", "Futuristic Marvel", "Latest Sneak Peek Upcoming Projects Showcase", "Architectural Gem"]; for (let t = 0; t < 4; t++) { let e = document.createElement("div"); e.classList.add("projects-title"), projectsTiles.appendChild(e), e.innerHTML = projTitlForAppend[t] } let projInnerWraper = document.createElement("div"); projInnerWraper.classList.add("projects_inner-wrapper"), projBack.appendChild(projInnerWraper); let projBackWidth, projBackHeight, numOfTransperentBckgImgs, projectsLength = projectThumbnailsSrc.length, projBackXCenter = (projectsLength < 6 && (projBackWidth = 2800, projBackHeight = 2e3, numOfTransperentBckgImgs = 2), 5 < projectsLength && projectsLength < 11 && (projBackWidth = 3e3, projBackHeight = 2500, numOfTransperentBckgImgs = 4), projectsLength < 21 && 10 < projectsLength && (projBackWidth = 4e3, projBackHeight = 3200, numOfTransperentBckgImgs = 7), projectsLength < 31 && 20 < projectsLength && (projBackWidth = 5e3, projBackHeight = 4200, numOfTransperentBckgImgs = 10), 30 < projectsLength && (projBackWidth = 6e3, projBackHeight = 5e3, numOfTransperentBckgImgs = 12), projBackWidth / 2), projBackYCenter = projBackHeight / 2; projWraper.style.width = projBack.style.width = projectsBckgImages.style.width = projBackWidth + "px", projWraper.style.height = projBack.style.height = projectsBckgImages.style.height = projBackHeight + "px"; for (let t = 0; t < numOfTransperentBckgImgs; t++) { let e = document.createElement("div"); e.classList.add("transparent-bckg-img"), projectsBckgImages.appendChild(e), e.style.background = `url(${projectsTransparentImgArray[0]})`, e.style.backgroundSize = "cover", e.style.left = projBackXCenter + projectsTransparentImgPosLeft[t] - e.offsetWidth / 2 + "px", e.style.top = projBackYCenter + projectsTransparentImgPosTop[t] - e.offsetHeight / 2 + "px", 1 == t && (e.style.scale = "1.2"), t % 2 == 0 && (e.style.scale = "1.3"), t % 3 == 0 && (e.style.scale = "1.1") } projectsTiles.style.left = projBackXCenter - projectsTiles.offsetWidth / 2 + "px", projectsTiles.style.top = projBackYCenter - projectsTiles.offsetHeight / 2 - 200 + "px"; let projectsTilesTL = gsap.fromTo(projectsTiles, { opacity: 0 }, { opacity: 1, duration: 5, delay: 1 }), strLineBottom = (projectsTilesTL.pause(), document.createElement("div")), strLineBottomTilesTL = (strLineBottom.classList.add("strLineBottom"), projWraper.appendChild(strLineBottom), gsap.fromTo(strLineBottom, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), strLineTop = (strLineBottomTilesTL.pause(), document.createElement("div")), strLineTopTL = (strLineTop.classList.add("strLineTop"), projWraper.appendChild(strLineTop), gsap.fromTo(strLineTop, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), yCoordNum = (strLineTopTL.pause(), document.createElement("div")), yCoordNumTL = (yCoordNum.classList.add("yCoordNum"), projWraper.appendChild(yCoordNum), yCoordNum.innerHTML = "X - 100", gsap.fromTo(yCoordNum, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), hrLineRight = (yCoordNumTL.pause(), document.createElement("div")), hrLineRightTL = (hrLineRight.classList.add("hrLineRight"), projWraper.appendChild(hrLineRight), gsap.fromTo(hrLineRight, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), hrLineLeft = (hrLineRightTL.pause(), document.createElement("div")), hrLineLeftTL = (hrLineLeft.classList.add("hrLineLeft"), projWraper.appendChild(hrLineLeft), gsap.fromTo(hrLineLeft, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), xCoordNum = (hrLineLeftTL.pause(), document.createElement("div")), xCoordNumTL = (xCoordNum.classList.add("xCoordNum"), projWraper.appendChild(xCoordNum), xCoordNum.innerHTML = "Y - 100", gsap.fromTo(xCoordNum, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), projectCursor = (xCoordNumTL.pause(), document.createElement("div")), projectCursorTL = (projWraper.appendChild(projectCursor), projectCursor.classList.add("cursor"), gsap.fromTo(projectCursor, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), projectCursorBckg = (projectCursorTL.pause(), document.createElement("div")), projectCursorBckgTL = (projWraper.appendChild(projectCursorBckg), projectCursorBckg.classList.add("cursor-background"), gsap.fromTo(projectCursorBckg, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0 })), cursorPosSet = (projectCursorBckgTL.pause(), 10), botRigLinePos = 11, topLefLinePos = 9; function cursorHandle(e) { var t = e.x, e = e.y; projectCursor.style.left = projectCursorBckg.style.left = t - cursorPosSet + "px", projectCursor.style.top = projectCursorBckg.style.top = e - cursorPosSet + "px", strLineBottom.style.left = t + "px", strLineBottom.style.top = e + botRigLinePos + "px", strLineTop.style.left = t + "px", strLineTop.style.top = e - projBackHeight - topLefLinePos + "px", yCoordNum.style.left = t - 13 + "px", yCoordNum.style.top = e - 300 + "px", yCoordNum.innerHTML = "X - " + Math.round(t), hrLineRight.style.top = e + "px", hrLineRight.style.left = t + botRigLinePos + "px", hrLineLeft.style.top = e + "px", hrLineLeft.style.left = t - projBackWidth - topLefLinePos + "px", xCoordNum.style.left = t - 300 + "px", xCoordNum.style.top = e - 20 + "px", xCoordNum.innerHTML = "Y - " + Math.round(e) } mainContainerProjects.addEventListener("mousemove", e => { cursorHandle(e) }); let bigDraggable = Draggable.create(projBack, { bounds: window, inertia: !0, onDrag: function (e) { var t = e.pageX, o = e.pageY; mouse.x = e.pageX + 50, mouse.y = e.pageY + 20, projectCursor.style.left = projectCursorBckg.style.left = t - cursorPosSet + "px", projectCursor.style.top = projectCursorBckg.style.top = o - cursorPosSet + "px", strLineBottom.style.left = t + "px", strLineBottom.style.top = o + botRigLinePos + "px", strLineTop.style.left = t + "px", strLineTop.style.top = o - projBackHeight - topLefLinePos + "px", yCoordNum.style.left = t - 13 + "px", yCoordNum.style.top = o - 300 + "px", yCoordNum.innerHTML = "X - " + Math.round(t), hrLineRight.style.top = o + "px", hrLineRight.style.left = t + botRigLinePos + "px", hrLineLeft.style.top = o + "px", hrLineLeft.style.left = t - projBackWidth - topLefLinePos + "px", xCoordNum.style.left = t - 300 + "px", xCoordNum.style.top = o - 20 + "px", xCoordNum.innerHTML = "Y - " + Math.round(o) } })[0], projPositionsLeft = (gsap.set(projBack, { x: (bigDraggable.minX + bigDraggable.maxX) / 2, y: (bigDraggable.minY + bigDraggable.maxY) / 2 }), bigDraggable.update(), [200, -550, 700, -50, 50, -600, 800, -1100, 1200, 1100, -1100, -1300, 1350, 50, 50, -650, 750, 750, -750, -1300, 1500, 1400, -1400, -1700, 1700, 1700, -1700, 50, 50, -650, 800, -2e3, 2e3, -50, -50, -800, -800, 700, 800, 1400, 1450, -1400, -1450, -2100, -2100, 2100, 2100, 2400, 2400, -2400, -2400]), projPositionsTop = [300, 0, -300, -450, 700, 500, 400, -600, 900, -600, 900, 50, 50, -1100, 1100, -1050, 1400, -1050, 1400, -1300, 1350, -1300, 1400, -800, 500, -800, 500, -1600, 1600, -1600, -1600, -200, -200, -2e3, 2e3, -2e3, 1900, -2e3, 1900, -1800, 1800, -1800, 1800, -1300, 1e3, -1300, 1e3, -700, 300, -700, 300], projImgWidth = 400, gsapLettersTimeLines = []; for (let r = 0; r < projectsLength; r++) { let e = document.createElement("div"), t = (projInnerWraper.appendChild(e), e.classList.add("project-container"), new Image), o = (e.appendChild(t), t.classList.add("project-img"), t.src = projectThumbnailsSrc[r], document.createElement("div")); e.appendChild(o), o.classList.add("project-title"), o.innerHTML = projectTitlesNames[r]; const B = new SplitType(o, { types: "chars" }); gsapLettersTimeLines.push(gsap.fromTo(B.chars, { y: 100, opacity: 0 }, { y: 0, opacity: 1, stagger: .05, duration: .3 })), gsapLettersTimeLines[r].pause(), r % 2 == 0 ? (e.style.transition = "0.55s", e.style.width = projImgWidth - 50 + "px") : r % 3 == 0 ? (e.style.transition = "0.6s", e.style.width = projImgWidth + 50 + "px") : (e.style.transition = "0.5s", e.style.width = projImgWidth + "px"), r == projectsLength - 1 && (e.style.width = projImgWidth - 50 + "px"), t.onload = function () { e.style.left = projBackXCenter - e.offsetWidth / 2 + "px", e.style.top = projBackYCenter - e.offsetHeight / 2 + "px" } } let projectContainers = document.getElementsByClassName("project-container"), projectTitlesLetters = document.getElementsByClassName("project-title"); function projectOnMouseOver(t) { gsapLettersTimeLines[t].play(), projectContainers[t].style.transform = "scale(1.2)"; for (let e = 0; e < projectContainers.length; e++)e != t && (projectContainers[e].style.transform = "scale(0.8)"); projectCursor.style.scale = "2", projectCursorBckg.style.scale = "2", cursorPosSet = 10, botRigLinePos = 22, topLefLinePos = 19, mouseFollowTL.play(), setTimeout(() => { mouseFollowText.innerHTML = "SEE DETAILS", mouseFollowTL.reverse() }, 500) } function projectOnMouseOut(e) { gsapLettersTimeLines[e].reverse(); for (let e = 0; e < projectContainers.length; e++)projectContainers[e].style.transform = "scale(1)"; projectCursor.style.scale = "1", projectCursorBckg.style.scale = "1", cursorPosSet = 10, botRigLinePos = 11, topLefLinePos = 9, mouseFollowTL.play(), setTimeout(() => { mouseFollowText.innerHTML = "DRAG TO MOVE", mouseFollowTL.reverse() }, 500) } let projectsOpen = !1; for (let e = 0; e < projectContainers.length; e++)projectContainers[e].addEventListener("mouseover", function () { projectsOpen && projectOnMouseOver(e) }), projectContainers[e].addEventListener("mouseout", function () { projectsOpen && projectOnMouseOut(e) }); let projectPageOpen = !1; function closeProjectsPage() { projectPageOpen && (projectPageOpen = !1, closeProjects.style.display = "none", projectCursor.style.display = "none", projectCursorBckg.style.display = "none", strLineBottom.style.display = "none", strLineTop.style.display = "none", yCoordNum.style.display = "none", hrLineRight.style.display = "none", hrLineLeft.style.display = "none", xCoordNum.style.display = "none", projectsClickableWraper.style.display = "block", projectsOpen = !1, strLineBottomTilesTL.reverse(), strLineTopTL.reverse(), yCoordNumTL.reverse(), hrLineRightTL.reverse(), hrLineLeftTL.reverse(), xCoordNumTL.reverse(), projectCursorTL.reverse(), projectCursorBckgTL.reverse(), closeProjectsTL.reverse(), projectsTilesTL.timeScale(-3), projectsBckgImagesTL.timeScale(-3), projBack.style.transition = "0.5s", gsap.set(projBack, { x: (bigDraggable.minX + bigDraggable.maxX) / 2, y: (bigDraggable.minY + bigDraggable.maxY) / 2 }), bigDraggable.update(), setTimeout(() => { projBack.style.transition = "0s"; for (let e = 0; e < projectContainers.length; e++)projectContainers[e].style.left = projBackXCenter - projectContainers[e].offsetWidth / 2 + "px", projectContainers[e].style.top = projBackYCenter - projectContainers[e].offsetHeight / 2 + "px" }, 500), mouseFollowTL.play(), setTimeout(() => { mouseFollowText.innerHTML = "CLICK TO EXPLORE", mouseFollowTL.reverse() }, 1e3)) } projectsClickableWraper.addEventListener("click", e => { if (!projectPageOpen) { projectPageOpen = !0, mouseFollowTL.play(), setTimeout(() => { mouseFollowText.innerHTML = "DRAG TO MOVE", mouseFollowTL.reverse() }, 1e3), projectsClickableWraper.style.display = "none", setTimeout(() => { closeProjects.style.display = "block", projectCursor.style.display = "block", projectCursorBckg.style.display = "block", strLineBottom.style.display = "block", strLineTop.style.display = "block", yCoordNum.style.display = "block", hrLineRight.style.display = "block", hrLineLeft.style.display = "block", xCoordNum.style.display = "block", projectsOpen = !0, strLineBottomTilesTL.play(), strLineTopTL.play(), yCoordNumTL.play(), hrLineRightTL.play(), hrLineLeftTL.play(), xCoordNumTL.play(), projectCursorTL.play(), projectCursorBckgTL.play(), closeProjectsTL.play() }, 500), projectsTilesTL.timeScale(1), projectsTilesTL.play(), projectsBckgImagesTL.timeScale(1), projectsBckgImagesTL.play(); for (let e = 0; e < projectContainers.length; e++)projectContainers[e].style.left = projBackXCenter + projPositionsLeft[e] - projectContainers[e].offsetWidth / 2 + "px", projectContainers[e].style.top = projBackYCenter + projPositionsTop[e] - projectContainers[e].offsetHeight / 2 + "px" } }); let closeProjectsTL = gsap.fromTo(closeProjects, { opacity: 0 }, { opacity: 1, duration: 1, delay: 0 }), closeIconTL = (closeProjectsTL.pause(), closeProjects.addEventListener("click", e => { closeProjectsPage() }), gsap.fromTo(closeIcon, { rotation: 0 }, { rotation: 90, duration: .5, delay: 0 })), loadingPage = (closeIconTL.pause(), closeProjects.addEventListener("mouseover", e => { closeIconTL.play(), mouseFollowTL.play() }), closeProjects.addEventListener("mouseout", e => { closeIconTL.reverse(), mouseFollowTL.reverse() }), document.createElement("div")), loadingSpinner = (projectsWrap.appendChild(loadingPage), loadingPage.classList.add("loadingPage"), document.createElement("div")), loadingPercentages = (document.getElementsByClassName("loadingPage")[0].appendChild(loadingSpinner), loadingSpinner.classList.add("loadingSpinner"), document.createElement("div")), canvasZone = (document.getElementsByClassName("loadingPage")[0].appendChild(loadingPercentages), loadingPercentages.classList.add("loadingPercentages"), document.createElement("div")), canvas = (mainContainerMap.appendChild(canvasZone), canvasZone.classList.add("canvasZone"), document.createElement("canvas")), devPopUp = (canvasZone.appendChild(canvas), canvas.classList.add("renderCanvas"), document.createElement("div")); mainContainerMap.appendChild(devPopUp), devPopUp.classList.add("devPopUp", "displayNone"), devPopUp.innerHTML = "Click to select location"; var startRenderLoop = function (e, t) { e.runRenderLoop(function () { sceneToRender && sceneToRender.activeCamera && sceneToRender.render() }) }, engine = (BABYLON.DefaultLoadingScreen.prototype.displayLoadingUI = function () { document.getElementById("customLoadingScreenDiv") && (document.getElementById("customLoadingScreenDiv").style.display = "initial") }, BABYLON.DefaultLoadingScreen.prototype.hideLoadingUI = function () { loadingPage.remove() }, null), scene = null, sceneToRender = null, createDefaultEngine = function () { return new BABYLON.Engine(canvas, !0, { preserveDrawingBuffer: !0, stencil: !0, disableWebGL2Support: !1 }) }, createScene = async function () { engine.displayLoadingUI(); var i = new BABYLON.Scene(engine); i.clearColor = BABYLON.Color3.FromHexString("#1b1b1b"); let a = new BABYLON.ArcRotateCamera("camera1", Math.PI / 2, Math.PI / 2, 0, new BABYLON.Vector3(0, 0, 0), i); a.attachControl(canvas, !0), a.inputs.attached.keyboard.detachControl(), a.setPosition(new BABYLON.Vector3(0, 80, 0)), a.minZ = .1, a.lowerRadiusLimit = 5, a.upperRadiusLimit = 140, a.wheelDeltaPercentage = .01, a.upperBetaLimit = 1.2; var c = new BABYLON.MeshBuilder.CreateBox("cameraTarget", { width: 1, height: 1, depth: 1 }, i), t = (c.position = new BABYLON.Vector3(0, 0, 0), (a.target = c).isVisible = !1, new BABYLON.FreeCamera("devCamera", new BABYLON.Vector3(-78, 5, 0), i)); t.rotation.y = 1.57, new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), i).intensity = .7; let o = 0; var e = await Promise.all([BABYLON.SceneLoader.ImportMeshAsync("", "https://raw.githubusercontent.com/quincecreative/logrodProjectPage/gh-pages/Minhen5.glb", null, i, e => { o = (o = e.lengthComputable ? 100 * e.loaded / e.total : 100 * e.loaded / 24955036).toFixed(), loadingPercentages.innerHTML = o + "%" })]), e = (e[0], e[0].meshes[0]); e.position = new BABYLON.Vector3(0, 0, 0), e.scaling = new BABYLON.Vector3(1, 1, 1), i.getMeshByName("Bouildings").material.ambientTexture = new BABYLON.Texture("https://raw.githubusercontent.com/quincecreative/logrodProjectPage/gh-pages/Buildings AO3-2.jpg", i), i.getMeshByName("Bouildings").material.ambientTexture.uScale = 1, i.getMeshByName("Bouildings").material.ambientTexture.vScale = -1; let r = [], n = [], p = [], s = [], l = []; var d, m, g, u, L, h, j, T, y = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI"); function B(e) { return Number(e) } let C = []; for (let e = 0; e < coordinates.length; e++) { var f = coordinates[e].split(",").map(B); C[e] = [f[0], f[1], f[2]], d = f[0], m = f[1], f = f[2], g = void 0, (g = new BABYLON.MeshBuilder.CreateBox("posMesh", { width: .1, height: .1, depth: .1 }, i)).position = new BABYLON.Vector3(d, m, f), g.isVisible = !1, l.push(g), (d = new BABYLON.GUI.Ellipse).width = "0px", d.height = "0px", d.color = "white", d.background = "white", y.addControl(d), d.linkWithMesh(g), n.push(d), (m = new BABYLON.GUI.Ellipse).width = "50px", m.height = "50px", m.color = "white", m.thickness = 15, m.background = "transparent", y.addControl(m), m.linkWithMesh(g), r.push(m) } for (let e = 0; e < coordinates.length; e++)u = l[e], L = projectThumbnailsSrc[e], h = projectTitlesNames[e], j = projectAdresses[e], T = void 0, (T = new BABYLON.GUI.Rectangle).width = "0px", T.height = "0px", T.color = "Orange", T.thickness = 0, T.background = "white", y.addControl(T), T.linkWithMesh(u), T.linkOffsetX = "-175px", T.linkOffsetY = "-75px", p.push(T), (u = new BABYLON.GUI.Rectangle).width = "150px", u.height = "150px", u.color = "Orange", u.thickness = 0, u.background = "white", u.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT, T.addControl(u), (L = new BABYLON.GUI.Image("image", L)).width = "150px", L.height = "150px", L.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT, u.addControl(L), (u = new BABYLON.GUI.Rectangle).width = "190px", u.height = "30px", u.color = "Orange", u.thickness = 0, u.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT, u.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP, u.top = "20px", T.addControl(u), (L = new BABYLON.GUI.TextBlock).color = "Black", L.fontSize = "17px", L.textHorizontalAlignment = "left", L.text = h, L.textWrapping = !0, L.drawOutline = !0, L.outlineColor = "black", L.outlineWidth = .5, u.addControl(L), (h = new BABYLON.GUI.Rectangle).width = "190px", h.height = "20px", h.color = "Orange", h.thickness = 0, h.top = "45px", h.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT, h.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP, T.addControl(h), (u = new BABYLON.GUI.TextBlock).color = "Gray", u.fontSize = "12px", u.textHorizontalAlignment = "left", u.text = j, u.textWrapping = !0, h.addControl(u), (L = new BABYLON.GUI.Rectangle).width = "190px", L.height = "50px", L.color = "Orange", L.thickness = 0, L.top = "90px", L.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT, L.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP, T.addControl(L), (j = BABYLON.GUI.Button.CreateSimpleButton("seeDetails", "See datails")).width = "120px", j.height = "40px", j.color = "white", j.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT, j.background = "black", L.addControl(j), s.push(j); let v = 50, x = 15, w = 0, N = 0, k = 0, O = 0, P = !1; function A(e) { P = !1, i.onAfterRenderObservable.clear(), r[e].thickness = 15, r[e].width = "50px", r[e].height = "50px", n[e].width = "0px", n[e].height = "0px", p[e].width = "0px", p[e].height = "0px", v = 50, x = 15, w = 0, N = 0, k = 0, O = 0 } for (let s = 0; s < r.length; s++)r[s].onPointerEnterObservable.add(function () { var e; Y || (e = s, P ? (r[e].thickness = 5, r[e].width = "70px", r[e].height = "70px", n[e].width = "30px", n[e].height = "30px", p[e].width = "350px", p[e].height = "150px") : (P = !0, i.registerAfterRender(function () { v < 71 && (r[e].thickness = x, r[e].width = v + "px", r[e].height = v + "px", v += 4, x -= 2, n[e].width = w + "px", n[e].height = w + "px", w += 6), (k < 351 || O < 151) && (p[e].width = k + "px", p[e].height = O + "px", k += 70, O += 30) })), canvasZone.style.cursor = "pointer") }), r[s].onPointerOutObservable.add(function () { Y || (A(s), canvasZone.style.cursor = "") }), r[s].onPointerDownObservable.add(function () { var e, t, o, r, n; Y || (e = C[s][0], t = C[s][1], o = C[s][2], r = new BABYLON.Animation("myAnimationcamera", "position", 60, BABYLON.Animation.ANIMATIONTYPE_VECTOR3, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT), (n = []).push({ frame: 0, value: c.position.clone() }), n.push({ frame: 120, value: new BABYLON.Vector3(e, t, o) }), r.setKeys(n), (e = new BABYLON.CubicEase).setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT), r.setEasingFunction(e), c.animations.push(r), i.beginAnimation(c, 0, 120, !1), t = new BABYLON.Animation("radiusAnimation", "radius", 60, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT), (o = []).push({ frame: 0, value: a.radius }), o.push({ frame: 120, value: 10 }), t.setKeys(o), (n = new BABYLON.CubicEase).setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT), t.setEasingFunction(n), a.animations.push(t), i.beginAnimation(a, 0, 120, !1)) }); for (let e = 0; e < p.length; e++)p[e].onPointerEnterObservable.add(function () { Y || (r[e].thickness = 5, r[e].width = "70px", r[e].height = "70px", n[e].width = "30px", n[e].height = "30px", p[e].width = "350px", p[e].height = "150px") }), p[e].onPointerOutObservable.add(function () { Y || A(e) }), s[e].onPointerEnterObservable.add(function () { Y || (canvasZone.style.cursor = "pointer") }), s[e].onPointerOutObservable.add(function () { Y || (canvasZone.style.cursor = "") }), s[e].onPointerUpObservable.add(function () { Y || A(e) }); let I = [], b, E; let M = 0, Y = !1; return document.addEventListener("keydown", e => { if ("v" === e.key) { if (e.repeat) return; E = i.onPointerObservable.add(e => { e.pickInfo.pickedPoint && 0 === e.event.button && (console.log(e.pickInfo.pickedPoint.x.toFixed(2), e.pickInfo.pickedPoint.y.toFixed(2), e.pickInfo.pickedPoint.z.toFixed(2)), I[0] = e.pickInfo.pickedPoint.x.toFixed(2), I[1] = e.pickInfo.pickedPoint.y.toFixed(2), I[2] = e.pickInfo.pickedPoint.z.toFixed(2), b = I.join(","), navigator.clipboard.writeText(b), devPopUp.innerHTML = "Location Copied!", setTimeout(() => { devPopUp.innerHTML = "Click to select location" }, 2e3)) }), canvasZone.classList.add("devMode"), devPopUp.classList.remove("displayNone") } "c" === e.key && (0 == M ? (Y = !0, M = 1, i.activeCamera = i.cameras[1], t.attachControl(!0), a.detachControl(!0)) : (Y = !1, M = 0, i.activeCamera = i.cameras[0], t.detachControl(!0), a.attachControl(!0))) }), document.addEventListener("keyup", e => { "v" === e.key && (i.onPointerObservable.remove(E), canvasZone.classList.remove("devMode"), devPopUp.classList.add("displayNone")) }), i.onAfterRenderObservable.add(function () { followMouse() }), i.executeWhenReady(() => { engine.hideLoadingUI(), engine.runRenderLoop(() => { engine.setHardwareScalingLevel(1 / window.devicePixelRatio), engine.adaptToDeviceRatio = !0, i.render() }) }), i }; window.initFunction = async function () { if (window.engine = await async function () { try { return createDefaultEngine() } catch (e) { return console.log("the available createEngine function failed. Creating the default engine instead"), createDefaultEngine() } }(), !engine) throw "engine should not be null."; startRenderLoop(engine, canvas), window.scene = createScene() }, initFunction().then(() => { sceneToRender = scene }), window.addEventListener("resize", function () { engine.resize() });