let projectComponentContainers = document.getElementsByClassName("project-component-container"), coordinatesDivs = document.getElementsByClassName("coordinates"), coordinates = (console.log(coordinatesDivs[0].innerHTML), []); for (let e = 0; e < coordinatesDivs.length; e++)coordinates.push(coordinatesDivs[e].innerHTML); console.log(coordinates); let projectThumbnailsSrc = [], projectThumbnails = document.getElementsByClassName("project-thumbnail"); for (let e = 0; e < projectThumbnails.length; e++)console.log(projectThumbnails[e].src), projectThumbnailsSrc.push(projectThumbnails[e].src); let projectTitlesNames = [], projectTitles = document.getElementsByClassName("project-title"); for (let e = 0; e < projectTitles.length; e++)projectTitlesNames.push(projectTitles[e].innerHTML); console.log(projectTitlesNames); let projectTitlesNamesGer = [], projectTitlesGer = document.getElementsByClassName("project-title-ger"); for (let e = 0; e < projectTitlesGer.length; e++)projectTitlesNamesGer.push(projectTitlesGer[e].innerHTML); console.log(projectTitlesNamesGer); let projectAdresses = [], projectAdressesDiv = document.getElementsByClassName("project-adress"); for (let e = 0; e < projectAdressesDiv.length; e++)projectAdresses.push(projectAdressesDiv[e].innerHTML); console.log(projectAdresses); let projectAdressesGer = [], projectAdressesDivGer = document.getElementsByClassName("project-adress-ger"); for (let e = 0; e < projectAdressesDivGer.length; e++)projectAdressesGer.push(projectAdressesDivGer[e].innerHTML); console.log(projectAdressesGer); let projectDescriptions = [], projectDescriptionsDiv = document.getElementsByClassName("project-description"); for (let e = 0; e < projectDescriptionsDiv.length; e++)projectDescriptions.push(projectDescriptionsDiv[e].innerHTML); console.log(projectDescriptions); let projectDescriptionsGer = [], projectDescriptionsDivGer = document.getElementsByClassName("project-description-ger"); for (let e = 0; e < projectDescriptionsDivGer.length; e++)projectDescriptionsGer.push(projectDescriptionsDivGer[e].innerHTML); console.log(projectDescriptionsGer); let projectImagesSrc = [], projectImagesOne = document.getElementsByClassName("project-image-one"), projectImagesTwo = document.getElementsByClassName("project-image-two"), projectImagesThree = document.getElementsByClassName("project-image-three"); for (let e = 0; e < projectComponentContainers.length; e++)projectImagesSrc[e] = [projectImagesOne[e].src, projectImagesTwo[e].src, projectImagesThree[e].src]; console.log(projectImagesSrc); let loadingPage = document.createElement("div"), loadingSpinner = (projectsWrap.appendChild(loadingPage), loadingPage.classList.add("loadingPage"), document.createElement("div")), loadingPercentages = (document.getElementsByClassName("loadingPage")[0].appendChild(loadingSpinner), loadingSpinner.classList.add("loadingSpinner"), document.createElement("div")), canvasZone = (document.getElementsByClassName("loadingPage")[0].appendChild(loadingPercentages), loadingPercentages.classList.add("loadingPercentages"), document.createElement("div")), canvas = (mainContainerMap.appendChild(canvasZone), canvasZone.classList.add("canvasZone"), document.createElement("canvas")), devPopUp = (canvasZone.appendChild(canvas), canvas.classList.add("renderCanvas"), document.createElement("div")); mainContainerMap.appendChild(devPopUp), devPopUp.classList.add("devPopUp", "displayNone"), devPopUp.innerHTML = "Click to select location"; var startRenderLoop = function (e, t) { e.runRenderLoop(function () { sceneToRender && sceneToRender.activeCamera && sceneToRender.render() }) }, engine = (BABYLON.DefaultLoadingScreen.prototype.displayLoadingUI = function () { document.getElementById("customLoadingScreenDiv") && (document.getElementById("customLoadingScreenDiv").style.display = "initial") }, BABYLON.DefaultLoadingScreen.prototype.hideLoadingUI = function () { loadingPage.remove() }, null), scene = null, sceneToRender = null, createDefaultEngine = function () { return new BABYLON.Engine(canvas, !0, { preserveDrawingBuffer: !0, stencil: !0, disableWebGL2Support: !1 }) }, createScene = async function () { engine.displayLoadingUI(); var a = new BABYLON.Scene(engine); a.clearColor = BABYLON.Color3.FromHexString("#1b1b1b"); let s = new BABYLON.ArcRotateCamera("camera1", Math.PI / 2, Math.PI / 2, 0, new BABYLON.Vector3(0, 0, 0), a); s.attachControl(canvas, !0), s.inputs.attached.keyboard.detachControl(), s.setPosition(new BABYLON.Vector3(-3.99, 40, 15.18)), s.minZ = .1, s.lowerRadiusLimit = 5, s.upperRadiusLimit = 50, s.wheelDeltaPercentage = .01, s.upperBetaLimit = .5; var c = new BABYLON.MeshBuilder.CreateBox("cameraTarget", { width: 1, height: 1, depth: 1 }, a), t = (c.position = new BABYLON.Vector3(-3.99, -.03, 15.18), (s.target = c).isVisible = !1, s.alpha = 1.32, new BABYLON.FreeCamera("devCamera", new BABYLON.Vector3(-78, 5, 0), a)); t.rotation.y = 1.57, new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), a).intensity = .7; let n = 0; var e = await Promise.all([BABYLON.SceneLoader.ImportMeshAsync("", "https://raw.githubusercontent.com/quincecreative/logrodProjectPage/gh-pages/Minhen5.glb", null, a, e => { n = (n = e.lengthComputable ? 100 * e.loaded / e.total : 100 * e.loaded / 24955036).toFixed(), loadingPercentages.innerHTML = n + "%" })]), e = (e[0], e[0].meshes[0]), e = (e.position = new BABYLON.Vector3(0, 0, 0), e.addRotation(0, 0, 0), e.clone()); e.position = new BABYLON.Vector3(0, 0, 75.88), e.scaling = new BABYLON.Vector3(1, 1, 1), a.getMeshByName("Bouildings").material.ambientTexture = new BABYLON.Texture("https://raw.githubusercontent.com/quincecreative/logrodProjectPage/gh-pages/Buildings AO3-2.jpg", a), a.getMeshByName("Bouildings").material.ambientTexture.uScale = 1, a.getMeshByName("Bouildings").material.ambientTexture.vScale = -1; let o = [], i = [], l = [], r = [], d = []; var p, g, h, m, u, B, A, L, N = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI"); function D(e) { return Number(e) } let O = [], v = [], T = []; for (let e = 0; e < coordinates.length; e++) { var w = coordinates[e].split(",").map(D); O[e] = [w[0], w[1], w[2]], p = w[0], g = w[1], w = w[2], h = void 0, (h = new BABYLON.MeshBuilder.CreateBox("posMesh", { width: .1, height: .1, depth: .1 }, a)).position = new BABYLON.Vector3(p, g, w), h.isVisible = !1, d.push(h), (p = new BABYLON.GUI.Ellipse).width = "0px", p.height = "0px", p.color = "white", p.background = "white", N.addControl(p), p.linkWithMesh(h), i.push(p), (g = new BABYLON.GUI.Ellipse).width = "50px", g.height = "50px", g.color = "white", g.thickness = 15, g.background = "transparent", N.addControl(g), g.linkWithMesh(h), o.push(g) } for (let e = 0; e < coordinates.length; e++)m = d[e], u = projectThumbnailsSrc[e], B = projectTitlesNames[e], A = projectAdresses[e], L = void 0, (L = new BABYLON.GUI.Rectangle).width = "0px", L.height = "0px", L.color = "Orange", L.thickness = 0, L.background = "white", N.addControl(L), L.linkWithMesh(m), L.linkOffsetX = "-175px", L.linkOffsetY = "-75px", l.push(L), (m = new BABYLON.GUI.Rectangle).width = "150px", m.height = "150px", m.color = "Orange", m.thickness = 0, m.background = "white", m.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT, L.addControl(m), (u = new BABYLON.GUI.Image("image", u)).width = "150px", u.height = "150px", u.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT, m.addControl(u), (m = new BABYLON.GUI.Rectangle).width = "190px", m.height = "30px", m.color = "Orange", m.thickness = 0, m.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT, m.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP, m.top = "20px", L.addControl(m), (u = new BABYLON.GUI.TextBlock).color = "Black", u.fontSize = "17px", u.textHorizontalAlignment = "left", u.text = B, u.textWrapping = !0, u.drawOutline = !0, u.outlineColor = "black", u.outlineWidth = .5, m.addControl(u), (B = new BABYLON.GUI.Rectangle).width = "190px", B.height = "20px", B.color = "Orange", B.thickness = 0, B.top = "45px", B.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT, B.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP, L.addControl(B), (m = new BABYLON.GUI.TextBlock).color = "Gray", m.fontSize = "12px", m.textHorizontalAlignment = "left", m.text = A, m.textWrapping = !0, B.addControl(m), (u = new BABYLON.GUI.Rectangle).width = "190px", u.height = "50px", u.color = "Orange", u.thickness = 0, u.top = "90px", u.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT, u.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP, L.addControl(u), (A = BABYLON.GUI.Button.CreateSimpleButton("seeDetails", "See datails")).width = "120px", A.height = "40px", A.color = "white", A.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT, A.background = "black", u.addControl(A), r.push(A), v.push(!1), T.push(!1); let C = 50, I = 15, j = 0, k = 0, E = 0, x = 0, f = !1; function b(e) { f = !1, a.onAfterRenderObservable.clear(), o[e].thickness = 15, o[e].width = "50px", o[e].height = "50px", i[e].width = "0px", i[e].height = "0px", l[e].width = "0px", l[e].height = "0px", C = 50, I = 15, j = 0, k = 0, E = 0, x = 0 } for (let r = 0; r < o.length; r++)o[r].onPointerEnterObservable.add(function () { var e; M || (e = r, f ? (o[e].thickness = 5, o[e].width = "70px", o[e].height = "70px", i[e].width = "30px", i[e].height = "30px", l[e].width = "350px", l[e].height = "150px") : (f = !0, a.registerAfterRender(function () { C < 71 && (o[e].thickness = I, o[e].width = C + "px", o[e].height = C + "px", C += 4, I -= 2, i[e].width = j + "px", i[e].height = j + "px", j += 6), (E < 351 || x < 151) && (l[e].width = E + "px", l[e].height = x + "px", E += 70, x += 30) })), canvasZone.style.cursor = "pointer", v[r] = !0) }), o[r].onPointerOutObservable.add(function () { M || (canvasZone.style.cursor = "", v[r] = !1, setTimeout(() => { v[r] || T[r] || b(r) }, 0)) }), o[r].onPointerDownObservable.add(function () { var e, t, n, o, i; M || (e = O[r][0], t = O[r][1], n = O[r][2], o = new BABYLON.Animation("myAnimationcamera", "position", 60, BABYLON.Animation.ANIMATIONTYPE_VECTOR3, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT), (i = []).push({ frame: 0, value: c.position.clone() }), i.push({ frame: 120, value: new BABYLON.Vector3(e, t, n) }), o.setKeys(i), (e = new BABYLON.CubicEase).setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT), o.setEasingFunction(e), c.animations.push(o), a.beginAnimation(c, 0, 120, !1), t = new BABYLON.Animation("radiusAnimation", "radius", 60, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT), (n = []).push({ frame: 0, value: s.radius }), n.push({ frame: 120, value: 10 }), t.setKeys(n), (i = new BABYLON.CubicEase).setEasingMode(BABYLON.EasingFunction.EASINGMODE_EASEOUT), t.setEasingFunction(i), s.animations.push(t), a.beginAnimation(s, 0, 120, !1)) }); for (let e = 0; e < l.length; e++)l[e].onPointerEnterObservable.add(function () { M || (T[e] = !0) }), l[e].onPointerOutObservable.add(function () { M || (T[e] = !1, setTimeout(() => { v[e] || T[e] || b(e) }, 0)) }), r[e].onPointerEnterObservable.add(function () { M || (canvasZone.style.cursor = "pointer") }), r[e].onPointerOutObservable.add(function () { M || (canvasZone.style.cursor = "") }), r[e].onPointerUpObservable.add(function () { M || b(e) }); let Y = [], G, y; let P = 0, M = !1; return document.addEventListener("keydown", e => { if ("v" === e.key) { if (e.repeat) return; y = a.onPointerObservable.add(e => { e.pickInfo.pickedPoint && 0 === e.event.button && (Y[0] = e.pickInfo.pickedPoint.x.toFixed(2), Y[1] = e.pickInfo.pickedPoint.y.toFixed(2), Y[2] = e.pickInfo.pickedPoint.z.toFixed(2), G = Y.join(","), navigator.clipboard.writeText(G), devPopUp.innerHTML = "Location Copied!", setTimeout(() => { devPopUp.innerHTML = "Click to select location" }, 2e3)) }), canvasZone.classList.add("devMode"), devPopUp.classList.remove("displayNone") } "c" === e.key && (0 == P ? (M = !0, P = 1, a.activeCamera = a.cameras[1], t.attachControl(!0), s.detachControl(!0)) : (M = !1, P = 0, a.activeCamera = a.cameras[0], t.detachControl(!0), s.attachControl(!0))) }), document.addEventListener("keyup", e => { "v" === e.key && (a.onPointerObservable.remove(y), canvasZone.classList.remove("devMode"), devPopUp.classList.add("displayNone")) }), a.executeWhenReady(() => { engine.hideLoadingUI(), engine.runRenderLoop(() => { engine.setHardwareScalingLevel(1 / window.devicePixelRatio), engine.adaptToDeviceRatio = !0, a.render() }) }), a }; window.initFunction = async function () { if (window.engine = await async function () { try { return createDefaultEngine() } catch (e) { return console.log("the available createEngine function failed. Creating the default engine instead"), createDefaultEngine() } }(), !engine) throw "engine should not be null."; startRenderLoop(engine, canvas), window.scene = createScene() }, initFunction().then(() => { sceneToRender = scene }), window.addEventListener("resize", function () { engine.resize() });